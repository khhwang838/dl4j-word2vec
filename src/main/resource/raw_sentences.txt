여기에서 소개하는 안내를 잘 따르면 DL4J 예제를 실행하거나 여러분의 작업을 시작할 수 있습니다.
빠른 답변이 필요한 경우엔 저희가 운영하는 Gitter Live Chat을 방문하십시오.
또, 채팅 페이지에서 다른 사람들의 질문/대화를 읽어보는 것 만으로도 DL4J에 대한 여러 가지를 배울 수 있을 겁니다.
만일 심층학습(딥러닝)에 대해 전혀 아는 내용이 없으시면, 시작하실때 무엇을 배워야 할지를 보여주는 로드맵 페이지를 참고하시기 바랍니다.
Deeplearning4j는 여러 층(Layer)으로 구성된 심층 신경망(Deep neural networks)을 구성하는데 사용되는 언어입니다.
우선 MultiLayerConfiguration을 설정해야 합니다.
여기에서는 여러분이 사용할 신경망의 층 개수와 같은 하이퍼 파라미터(Hyperparameter)를 설정합니다.

하이퍼 파라미터는 신경망의 구조와 학습 방법을 결정하는 매개변수입니다.
예를 들어 학습중인 모델의 계수를 몇 번 업데이트 할 지, 어떻게 계수를 초기화 할지, 어떤 활성 함수를 사용할지, 어떤 최적화 알고리듬을 사용할지 등을 결정합니다.
아래 예제 코드를 참고하십시오.
이제 NeuralNetConfiguration.Builder()의 layer()를 호출하면 층(layer)을 추가할 수 있습니다.
이 때, 층을 추가할 위치와 입력, 출력 노드(node)의 개수, 추가할 층의 유형을 정해줘야 합니다.
예를 들면 아래와 같습니다.
이렇게 원하는 층을 추가한 뒤에는 model.fit으로 모델을 학습합니다.
이 퀵 스타트 가이드를 따라하시려면 먼저 아래의 네 가지 소프트웨어를 설치해야 합니다.
Deeplearning4j는 인텔리J나 메이븐같은 IDE와 빌드 자동화 도구와 배포에 익숙한 고급 자바 개발자를 대상으로 합니다.
만약 여러분이 이미 이런 소프트웨어의 사용에 익숙하시다면 DL4J를 사용하실 준비를 완벽하게 갖춘 셈 입니다.

만일 자바를 처음 시작하거나 위의 도구를 사용해본 경험이 없다면 아래에 나와 있는 설치 및 설정 안내를 따라하면 됩니다.
설치 및 사용 경험이 있다면 바로 DL4J 예제로 넘어가면 됩니다.
우선 자바 1.7 혹은 최신 버전을 자바 개발자 도구 JDK 다운로드 페이지에서 다운받으십시오.
현재 설치된 자바 버전은 아래 명령어로 확인할 수 있습니다.
설치된 자바가 64비트인지 확인하십시오.
만일 32비트 버전의 자바가 설치되어 있다면 사용중에 no jnind4j in java.library.path 에러가 발생할 것입니다.
메이븐은 자바 프로젝트의 의존성 관리 및 빌드 자동화 도구입니다.
메이븐은 인텔리J 등 통합개발환경에 호환이 되고 이를 이용해 프로젝트 라이브러리 관리를 편하게 할 수 있습니다.
아파치에서 제공하는 메이븐 설치 가이드 메이븐을 다운로드 및 설치하면 됩니다.
현재 설치된 메이븐 버전은 아래 명령어로 확인합니다.
이 포스팅은 RNNs(Recurrent Neural Networks), 특히 RNNs의 한 종류인 LSTM(Long Short-Term Memory)을 설명하는 포스팅입니다.

RNNs은 글, 유전자, 손글씨, 음성 신호, 센서가 감지한 데이타, 주가 등 배열(sequence, 또는 시계열 데이터)의 형태를 갖는 데이터에서 패턴을 인식하는 인공 신경망 입니다.

RNNs은 궁극의 인공 신경망 구조라고 주장하는 사람들이 있을 정도로 강력합니다.
RNNs은 배열 형태가 아닌 데이터에도 적용할 수 있습니다.
예를 들어 이미지에 작은 이미지 패치(필터)를 순차적으로 적용하면 배열 데이터를 다루듯 RNNs을 적용할 수 있습니다.

RNNs은 배열에 등장했던 패턴을 ‘기억’할 수 있는 능력이 있습니다.
이 부분은 사람의 기억과 기억력에 비유하면 아주 간결하게 설명할 수 있어서 종종 RNNs을 사람의 뇌처럼 취급합니다.
RNNs을 이해하려면 우선 일반적인 인공 신경망(FFNets)를 이해하셔야 합니다.
일반적인 인공 신경망을 Feed-forward neural networks라고도 하는데 그 이름에서 이미 RNNs (Recurrent neural networks)과 어떤 점이 다른지 드러납니다.
FFNets은 데이터를 입력하면 연산이 입력층에서 은닉층(hidden layers)를 거쳐 출력까지 차근차근 진행됩니다.
이 과정에서 입력 데이터는 모든 노드를 딱 한 번씩 지나가게 됩니다.
그러나 RNNs은 은닉층의 결과가 다시 같은 은닉층의 입력으로 들어가도록 연결되어 있습니다.

FFNets의 입/출력이 각각 사진과 사진의 라벨(고양이, 코끼리..)이라면 (즉, 지도 학습의 경우) 이 FFNets은 사진에 있는 물체에서 패턴을 파악해서 적절한 라벨을 찾아줍니다.
아래 그림에 나온 FFNets의 구조를 참고하시기 바랍니다.
FFNets은 라벨을 붙여놓은 이미지 데이터로 학습을 진행하면서 점점 오차를 줄여갑니다.
학습이 이루어지기 전에 데이터의 일부를 따로 관리하는데, 이를 테스트 셋이라고 합니다.
테스트 셋은 학습 과정에서는 사용하지 않습니다.
비유하자면 시험에 나올 문제의 유형과 범위는 알려주지만 출제할 문제는 정확히 알려주지 않는 것입니다.
한편 신경망은 학습 과정에서 사용하는 데이터를 독립적으로 학습합니다.
즉, 데이터의 순서는 중요하지 않습니다.

다시 말해 FFNets은 시간 순서를 무시하고 현재 주어진 데이터만 가지고 판단합니다.
즉, 이 데이터 전에 봤었던 데이터가 무엇인지 기억하려 들지 않습니다.
그야말로 오늘만 사는 FFNets이라고 할 수 있습니다.
